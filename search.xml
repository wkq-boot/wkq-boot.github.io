<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java实验一:</title>
      <link href="2021/05/08/java%E5%AE%9E%E9%AA%8C%E4%B8%80/"/>
      <url>2021/05/08/java%E5%AE%9E%E9%AA%8C%E4%B8%80/</url>
      
        <content type="html"><![CDATA[<h3 id="实验一：Java-基础程序设计（1）"><a href="#实验一：Java-基础程序设计（1）" class="headerlink" title="实验一：Java 基础程序设计（1）"></a>实验一：Java 基础程序设计（1）</h3><p>输入一系列成绩，输出最高分、最低分、平均分，并统计存在多少个并列最高分，要求输入输出格式正确，一重循环解决全部问题。<br>输入：65 87 95 86 72 58 56 75 95 94 78…<br>输出：最高分：95，最低分：56，平均分：72.36，同时存在 2 个并列最高分。</p><pre class="line-numbers language-bash"><code class="language-bash">package cn.itcast.Sy1test1<span class="token punctuation">;</span><span class="token function">import</span> java.util.Scanner<span class="token punctuation">;</span>public class Test1 <span class="token punctuation">{</span>    public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"请输入一系列成绩："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner k <span class="token operator">=</span> new Scanner<span class="token punctuation">(</span>System.in<span class="token punctuation">)</span><span class="token punctuation">;</span>        String m <span class="token operator">=</span> k.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> score <span class="token operator">=</span> m.split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        int<span class="token punctuation">[</span><span class="token punctuation">]</span> sc <span class="token operator">=</span> new int<span class="token punctuation">[</span>score.length<span class="token punctuation">]</span><span class="token punctuation">;</span>        int <span class="token function">sum</span> <span class="token operator">=</span> 0, j <span class="token operator">=</span> 0<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> score.length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Integer.parseInt<span class="token punctuation">(</span>score<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sum</span> +<span class="token operator">=</span> sc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            j++<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        int max, min, count <span class="token operator">=</span> 0<span class="token punctuation">;</span>        max <span class="token operator">=</span> sc<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">;</span>        min <span class="token operator">=</span> sc<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>                max <span class="token operator">=</span> sc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                count <span class="token operator">=</span> 1<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">==</span> sc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                count++<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>                min <span class="token operator">=</span> sc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System.out.print<span class="token punctuation">(</span><span class="token string">"最高分:"</span> + max + <span class="token string">",最低分:"</span> + min<span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.printf<span class="token punctuation">(</span><span class="token string">",平均分:%.2f"</span>, <span class="token punctuation">(</span>float<span class="token punctuation">)</span> <span class="token function">sum</span> / j<span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span><span class="token string">",同时存在"</span> + count + <span class="token string">"个并列最高分"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实验一：Java-基础程序设计（2）"><a href="#实验一：Java-基础程序设计（2）" class="headerlink" title="实验一：Java 基础程序设计（2）"></a>实验一：Java 基础程序设计（2）</h3><p>输出 1,000,000 之内的所有素数（即非 1 和自身不能被其他数除尽的数）要求程<br>序简单，程序运行速度较快，行列对齐美观。</p><pre class="line-numbers language-bash"><code class="language-bash">package cn.itcast.Sy1test1<span class="token punctuation">;</span>public class Test2 <span class="token punctuation">{</span>    public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      int n,cout<span class="token operator">=</span>0<span class="token punctuation">;</span>      //素数判断        for<span class="token punctuation">(</span>n <span class="token operator">=</span> 2 <span class="token punctuation">;</span> n<span class="token operator">&lt;=</span> 1000000 <span class="token punctuation">;</span> n++<span class="token punctuation">)</span><span class="token punctuation">{</span>            int i<span class="token punctuation">;</span>            for<span class="token punctuation">(</span> i <span class="token operator">=</span> 2 <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>Math.sqrt<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">;</span> i++<span class="token punctuation">)</span><span class="token punctuation">{</span>                if<span class="token punctuation">(</span>n%i <span class="token operator">==</span>0<span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            if<span class="token punctuation">(</span>i<span class="token operator">></span>Math.sqrt<span class="token punctuation">(</span>n<span class="token punctuation">))</span> <span class="token punctuation">{</span>                System.out.print<span class="token punctuation">(</span>n+<span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cout++<span class="token punctuation">;</span>                if<span class="token punctuation">(</span>cout%10<span class="token operator">==</span>0<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    System.out.println<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System.out.println<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"一共有"</span>+cout+<span class="token string">"个"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="实验一：Java-基础程序设计（3）"><a href="#实验一：Java-基础程序设计（3）" class="headerlink" title="实验一：Java 基础程序设计（3）"></a>实验一：Java 基础程序设计（3）</h3><pre class="line-numbers language-bash"><code class="language-bash">package cn.itcast.Sy1test1<span class="token punctuation">;</span><span class="token function">import</span> java.util.Scanner<span class="token punctuation">;</span>public class Test3 <span class="token punctuation">{</span>    public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        simple<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//        nb<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    private static void simple<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        while<span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"请输入金字塔层数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner sc<span class="token operator">=</span>new Scanner<span class="token punctuation">(</span>System.in<span class="token punctuation">)</span><span class="token punctuation">;</span>        int num<span class="token operator">=</span>sc.nextInt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        for<span class="token punctuation">(</span>int i<span class="token operator">=</span>1<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>num<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>     //控制行数            <span class="token keyword">for</span> <span class="token punctuation">(</span>int j <span class="token operator">=</span> 0<span class="token punctuation">;</span> j <span class="token operator">&lt;</span>num-i<span class="token punctuation">;</span> j++<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System.out.print<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            for<span class="token punctuation">(</span>int k<span class="token operator">=</span>0<span class="token punctuation">;</span>k<span class="token operator">&lt;</span>i <span class="token punctuation">;</span>k++<span class="token punctuation">)</span><span class="token punctuation">{</span>                if<span class="token punctuation">(</span>i%2<span class="token operator">==</span>1<span class="token punctuation">)</span><span class="token punctuation">{</span>                    System.out.print<span class="token punctuation">(</span><span class="token string">"1"</span>+<span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>else<span class="token punctuation">{</span>                    System.out.print<span class="token punctuation">(</span><span class="token string">"2"</span>+<span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            System.out.println<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    /*private static void nb<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          //升级版   随便输入n个数据都可以“循环数据“打印金字塔        while<span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">{</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"请输入金字塔层数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Scanner sc <span class="token operator">=</span> new Scanner<span class="token punctuation">(</span>System.in<span class="token punctuation">)</span><span class="token punctuation">;</span>            Scanner sq <span class="token operator">=</span> new Scanner<span class="token punctuation">(</span>System.in<span class="token punctuation">)</span><span class="token punctuation">;</span>            int num <span class="token operator">=</span> sc.nextInt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"请输入数据："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String s <span class="token operator">=</span> sq.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> score <span class="token operator">=</span> s.split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> m <span class="token operator">=</span> new String<span class="token punctuation">[</span>score.length<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>int k <span class="token operator">=</span> 0<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> score.length<span class="token punctuation">;</span> k++<span class="token punctuation">)</span> <span class="token punctuation">{</span>                m<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> score<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            int cout <span class="token operator">=</span> 0, q <span class="token operator">=</span> 0, cq <span class="token operator">=</span> 0<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>cq <span class="token operator">&lt;</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>int j <span class="token operator">=</span> num - cq<span class="token punctuation">;</span> j <span class="token operator">></span> 0<span class="token punctuation">;</span> j--<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        System.out.print<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>int n <span class="token operator">=</span> 0<span class="token punctuation">;</span> n <span class="token operator">&lt;</span> cq + 1<span class="token punctuation">;</span> n++<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        System.out.print<span class="token punctuation">(</span>m<span class="token punctuation">[</span>q<span class="token punctuation">]</span> + <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    q++<span class="token punctuation">;</span>                    cq++<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> score.length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        q <span class="token operator">=</span> 0<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>cout <span class="token operator">==</span> cq - 1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        System.out.println<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    cout++<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>*/<span class="token punctuation">}</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p>(1)<br><img src="/2021/05/08/java%E5%AE%9E%E9%AA%8C%E4%B8%80/%E5%9B%BE%E7%89%871.jpg"><br>(2)内容过多，只展示一部分<br><img src="/2021/05/08/java%E5%AE%9E%E9%AA%8C%E4%B8%80/%E5%9B%BE%E7%89%873.jpg"><br>(3)<br><img src="/2021/05/08/java%E5%AE%9E%E9%AA%8C%E4%B8%80/%E5%9B%BE%E7%89%872.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java实验二:</title>
      <link href="2021/05/08/java%E5%AE%9E%E9%AA%8C%E4%BA%8C/"/>
      <url>2021/05/08/java%E5%AE%9E%E9%AA%8C%E4%BA%8C/</url>
      
        <content type="html"><![CDATA[<h3 id="实验二：复数类的实现及运算"><a href="#实验二：复数类的实现及运算" class="headerlink" title="实验二：复数类的实现及运算"></a>实验二：复数类的实现及运算</h3><p>定义一个复数类，并实现以下复数类的方法：构造方法、得到实部、得到虚部、设置实部、设置虚部、复数的加法，减法，乘法，最后，创建对象进行运算。<br><strong>1、复数类 Complex 必须满足如下要求：<br>(1) 复数类 Complex 的属性有：</strong><br>realPart : double 型 ，私有属性，代表复数的实数部分<br>imaginPart : double 型 ，私有属性，代表复数的虚数部分<br><strong>(2) 复数类 Complex 的构造方法有：</strong><br>Complex( ) : 构造函数，将复数的实部和虚部都置 0。<br>Complex( double r , double i ) : 构造函数，形参 r 为实部的初值，i 为虚部的<br>初值。<br><strong>(3) 复数类 Complex 的公有方法有：</strong><br>void setReal(): 设置复数对象的实部值；<br>void setImagin (): 设置复数对象的虚部值；<br>double getReal(): 获得复数对象的实部数值；<br>double getImagin (): 获得复数对象的虚部数值；<br>Complex complexAdd(Complex a) : 将当前复数对象与形参复数对象相加，所<br>得的结果仍是一个复数值，返回给此方法的调用者。<br>说明：（a+bi）+(c+di)= (a+c)+(b+d)i<br>Complex complexSub(Complex a) : 将当前复数对象与形参复数对象相减，所<br>得的结果仍是一个复数值，返回给此方法的调用者。<br>Complex complexMulti(Complex a) : 将当前复数对象与形参复数对象相乘，所<br>得的结果仍是一个复数值，返回给此方法的调用者。<br>说明：（a+bi）*(c+di)=ac+bci+adi+bdi2=(ac-bd)+(bc+ad)i<br>Complex complexDiv(Complex a) : 将当前复数对象与形参复数对象相除，所<br>得的结果仍是一个复数值，返回给此方法的调用者。<br>说明：复数相除其实采用的是分子分母同时乘以分母的共轭复数，用以将分母的<br>虚部消除掉，除法可调用乘法进行计算更简便。 boolean equals(Complex a) : 将当前复数对象与形参复数对象进行比较，判断是<br>否相等，返回一个布尔值。<br>String toString( ) : 把当前复数对象的实部、虚部组合成 a+bi 的字符串形式，其<br>中 a 和 b 分别为实部和虚部的数据，注意特殊数值的情况，如实部为 0、虚部为负，<br>等等情况的表现方法。<br>常见复数的写法有：3+2i，3-2i，4+i，4-i，1，0，-2i，i，-i 等(应当编写一个数<br>组，存入以上 9 个复数，然后循环一次性全部输出，便于检查)。<br><strong>2、定义个 ComplexDemo 类：</strong><br>该类是程序的入口，要求能在主方法中创建至少 3 个复数（两个做操作数，通过<br>键盘输入实部和虚部创建，一个做结果，不需实部和虚部），然后调用上述方法进行<br>运算，并打印相应结果进行观察<br><strong>Complex类</strong></p><pre class="line-numbers language-bash"><code class="language-bash">package cn.itcast.Sy1test1<span class="token punctuation">;</span><span class="token function">import</span> java.text.DecimalFormat<span class="token punctuation">;</span><span class="token function">import</span> java.util.Scanner<span class="token punctuation">;</span>public class Complex <span class="token punctuation">{</span>    private double real<span class="token punctuation">;</span>    private double imagin<span class="token punctuation">;</span>    static double <span class="token punctuation">[</span><span class="token punctuation">]</span> RealNum<span class="token operator">=</span><span class="token punctuation">{</span>3,3,4,4,1,0,0,0,0<span class="token punctuation">}</span><span class="token punctuation">;</span>    static double <span class="token punctuation">[</span><span class="token punctuation">]</span> ImagNum<span class="token operator">=</span><span class="token punctuation">{</span>2,-2,1,-1,0,0,-2,1,-1<span class="token punctuation">}</span><span class="token punctuation">;</span>    public Complex<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner sc <span class="token operator">=</span> new Scanner<span class="token punctuation">(</span>System.in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"请输入复数实部："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        double r <span class="token operator">=</span> sc.nextDouble<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"请输入复数虚部："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        double i <span class="token operator">=</span> sc.nextDouble<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        complex<span class="token punctuation">(</span>r, i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    private void complex<span class="token punctuation">(</span>double r, double i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.real <span class="token operator">=</span> r<span class="token punctuation">;</span>        this.imagin <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public Complex<span class="token punctuation">(</span>double real, double imagin<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.real <span class="token operator">=</span> real<span class="token punctuation">;</span>        this.imagin <span class="token operator">=</span> imagin<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public double getReal<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> real<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setReal<span class="token punctuation">(</span>double real<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.real <span class="token operator">=</span> real<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public double getImagin<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> imagin<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setImagin<span class="token punctuation">(</span>double imagin<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.imagin <span class="token operator">=</span> imagin<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    //复数加法    public Complex Add<span class="token punctuation">(</span>Complex a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        double r1 <span class="token operator">=</span> a.getReal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        double i1 <span class="token operator">=</span> a.getImagin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        double newr1 <span class="token operator">=</span> r1 + real<span class="token punctuation">;</span>        double newi1 <span class="token operator">=</span> i1 + imagin<span class="token punctuation">;</span>        <span class="token keyword">return</span> new Complex<span class="token punctuation">(</span>newr1, newi1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="运行结果"><a href="#运行结果" class="headerlink" title="运行结果"></a>运行结果</h3><p><img src="/2021/05/08/java%E5%AE%9E%E9%AA%8C%E4%BA%8C/%E7%BB%93%E6%9E%9C1.jpg"></p>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java实验三:</title>
      <link href="2021/05/08/java%E5%AE%9E%E9%AA%8C%E4%B8%89/"/>
      <url>2021/05/08/java%E5%AE%9E%E9%AA%8C%E4%B8%89/</url>
      
        <content type="html"><![CDATA[<h3 id="实验三-身份证号码分析"><a href="#实验三-身份证号码分析" class="headerlink" title="实验三:身份证号码分析"></a>实验三:身份证号码分析</h3><p>身份证号码验证及个人信息输出。<br>在网页、管理信息系统中，我们经常会要求用户输入身份证号码，由于身份<br>证号码较长，经常容易产生录入错误，本验证可以有效防止用户录用错误。<br>其实身份证中还包含了用户的个人信息，包含出生地、生日、性别的等内容。<br>如：51 01 03 19XX 01 03 028 X 为：省 市 区 出生年 月 日 顺序码 校验码<br>1、身份证验证主要包含：<br>(1) 位数错误：正确应该为 18 位。<br>(2) 字符错误：前面 17 个应该是数字，最后一位可以为‘X’或‘x’；<br>(3)校验码错误：<br>身份证的最后一位为校验码，校验码是用于验证前面的数字是否有错误，校<br>验码运算规则：<br>（1）先将最后一位设定为 0。<br>（2）效验码的计算公式为：(Σ (ai×wi))%11<br> 其中：i 是从右向左的包括效验码在内的序号（1－18）<br>ai 是第 i 位的数字<br>wi 是第 i 位上的加权因子，其数值依据公式 wi=(2(i-1))%11，（计算 ab：函<br>数为：java.lang.Math.pow(a,b)） i，ai，wi 的对应关系如下：<br>证号码：5 1 0 1 0 1 1 9 8 8 0 8 0 8 0 1 2 0<br> i：18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1<br> ai：5 1 0 1 0 1 1 9 8 8 0 8 0 8 0 1 2 0<br>wi: 用公式计算 2^(i-1)%11 …… 9 10 5 8 4 2 1<br>（3）求出(Σ (ai×wi))%11 之后依据下表得到效验码：<br><img src="/2021/05/08/java%E5%AE%9E%E9%AA%8C%E4%B8%89/1.jpg"><br>（3）计算 ab：函数为：java.lang.Math.pow(a,b)<br>2、个人信息输出主要包含：<br>(1) 生日：如 1985 年 5 月 9 日。<br>(2) 年龄：如 20 岁，应当精确到日；<br>(3) 性别：顺序码的计数为，男性以奇数计数，女性以偶数计数<br><strong>要求：</strong><br>（1）编写一个身份证类，包含一个属性：身份证号；三个验证函数；一个<br>信息输出函数。<br>（2）编写一个测试类，可从键盘上输入一个身份证号码，产生一个身份证<br>对象，然后调用其相关方法对身份证号码进行验证，没有通过验证的话，提示错<br>误信息并让用户重新输入，如果通过验证，则输出该人的信息。</p><h3 id="CardID类"><a href="#CardID类" class="headerlink" title="CardID类"></a>CardID类</h3><pre class="line-numbers language-bash"><code class="language-bash">package cn.itcast.Sy1test1<span class="token punctuation">;</span><span class="token function">import</span> java.text.ParseException<span class="token punctuation">;</span><span class="token function">import</span> java.text.SimpleDateFormat<span class="token punctuation">;</span><span class="token function">import</span> java.util.Calendar<span class="token punctuation">;</span><span class="token function">import</span> java.util.Date<span class="token punctuation">;</span>public class CardID <span class="token punctuation">{</span>    private String cardNum<span class="token punctuation">;</span>    public String getCardNum<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> cardNum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setCardNum<span class="token punctuation">(</span>String cardNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.cardNum <span class="token operator">=</span> cardNum<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    //位数错误验证    public boolean lengthVerify<span class="token punctuation">(</span>String cardNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cardNum.length<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> 18<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"位数错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    //字符错误验证    public boolean charVerify<span class="token punctuation">(</span>String cardNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        int i<span class="token punctuation">;</span>        char<span class="token punctuation">[</span><span class="token punctuation">]</span> card <span class="token operator">=</span> cardNum.toCharArray<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> card.length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> 17 <span class="token operator">&amp;&amp;</span> <span class="token string">'0'</span> <span class="token operator">&lt;=</span> card<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> card<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">==</span>17<span class="token operator">&amp;&amp;</span><span class="token string">'0'</span> <span class="token operator">&lt;=</span> card<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> card<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token operator">||</span>card<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'x'</span><span class="token operator">||</span>card<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'X'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    System.out.println<span class="token punctuation">(</span><span class="token string">"身份证的字符错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        i <span class="token operator">=</span> 16<span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">'0'</span> <span class="token operator">&lt;=</span> card<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> card<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token string">'9'</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    //验证码错误验证    public boolean checkCodeVerify<span class="token punctuation">(</span>String cardNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        char<span class="token punctuation">[</span><span class="token punctuation">]</span> card <span class="token operator">=</span> cardNum.toCharArray<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String jyz <span class="token operator">=</span> <span class="token string">"10X98765432"</span><span class="token punctuation">;</span>        int j <span class="token operator">=</span> 0, k <span class="token operator">=</span> 0, <span class="token function">sum</span> <span class="token operator">=</span> 0, jy<span class="token punctuation">;</span>        int<span class="token punctuation">[</span><span class="token punctuation">]</span> num <span class="token operator">=</span> new int<span class="token punctuation">[</span>card.length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> card.length<span class="token punctuation">;</span> i <span class="token operator">></span> 1<span class="token punctuation">;</span> i--<span class="token punctuation">)</span> <span class="token punctuation">{</span>            char ai <span class="token operator">=</span> card<span class="token punctuation">[</span>j++<span class="token punctuation">]</span><span class="token punctuation">;</span>            num<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>int<span class="token punctuation">)</span> Math.pow<span class="token punctuation">(</span>2, <span class="token punctuation">(</span>i - 1<span class="token punctuation">))</span> % 11<span class="token punctuation">;</span>            <span class="token function">sum</span> +<span class="token operator">=</span> <span class="token punctuation">(</span>ai - <span class="token string">'0'</span><span class="token punctuation">)</span> * num<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            k <span class="token operator">=</span> k + 1<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        jy <span class="token operator">=</span> <span class="token function">sum</span> % 11<span class="token punctuation">;</span>        String ch <span class="token operator">=</span> jyz.charAt<span class="token punctuation">(</span>jy<span class="token punctuation">)</span> + <span class="token string">""</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        String ch1 <span class="token operator">=</span> cardNum.substring<span class="token punctuation">(</span>0, 17<span class="token punctuation">)</span><span class="token punctuation">;</span>        String newStr <span class="token operator">=</span> ch1.concat<span class="token punctuation">(</span>ch<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>newStr.equalsIgnoreCase<span class="token punctuation">(</span>cardNum<span class="token punctuation">))</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"校验码错误！"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    //信息输出    public void output<span class="token punctuation">(</span>String cardNum<span class="token punctuation">)</span> <span class="token punctuation">{</span>        String str <span class="token operator">=</span> cardNum<span class="token punctuation">;</span>        String str1 <span class="token operator">=</span> str.substring<span class="token punctuation">(</span>14, 17<span class="token punctuation">)</span><span class="token punctuation">;</span>        //生日        String y <span class="token operator">=</span> str.substring<span class="token punctuation">(</span>6, 10<span class="token punctuation">)</span>.concat<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String m <span class="token operator">=</span> str.substring<span class="token punctuation">(</span>10, 12<span class="token punctuation">)</span>.concat<span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String <span class="token function">time</span> <span class="token operator">=</span> y.concat<span class="token punctuation">(</span>m.concat<span class="token punctuation">(</span>str.substring<span class="token punctuation">(</span>12, 14<span class="token punctuation">))</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"生日："</span> + time<span class="token punctuation">)</span><span class="token punctuation">;</span>        //年龄        Calendar calNow <span class="token operator">=</span> Calendar.getInstance<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Calendar <span class="token function">cal</span> <span class="token operator">=</span> Calendar.getInstance<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Calendar calLast <span class="token operator">=</span> Calendar.getInstance<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        //string类型转换时间对象        Date <span class="token function">date</span> <span class="token operator">=</span> new Date<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SimpleDateFormat sdf <span class="token operator">=</span> new SimpleDateFormat<span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        SimpleDateFormat sdf1 <span class="token operator">=</span> new SimpleDateFormat<span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String yer <span class="token operator">=</span> calNow.get<span class="token punctuation">(</span>Calendar.YEAR<span class="token punctuation">)</span> - 1 + <span class="token string">"-"</span><span class="token punctuation">;</span>        String lastYear <span class="token operator">=</span> yer.concat<span class="token punctuation">(</span>m.concat<span class="token punctuation">(</span>str.substring<span class="token punctuation">(</span>12, 14<span class="token punctuation">))</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Date date1 <span class="token operator">=</span> null<span class="token punctuation">;</span>        Date last <span class="token operator">=</span> null<span class="token punctuation">;</span>        try <span class="token punctuation">{</span>            date1 <span class="token operator">=</span> sdf.parse<span class="token punctuation">(</span>time<span class="token punctuation">)</span><span class="token punctuation">;</span>            last <span class="token operator">=</span> sdf1.parse<span class="token punctuation">(</span>lastYear<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> catch <span class="token punctuation">(</span>ParseException e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            e.printStackTrace<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        //date转换为Calendar        calNow.setTime<span class="token punctuation">(</span>date<span class="token punctuation">)</span><span class="token punctuation">;</span>        cal.setTime<span class="token punctuation">(</span>date1<span class="token punctuation">)</span><span class="token punctuation">;</span>        calLast.setTime<span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">;</span>        //判断今年是否为闰年        int r1 <span class="token operator">=</span> calNow.get<span class="token punctuation">(</span>Calendar.YEAR<span class="token punctuation">)</span>, r2 <span class="token operator">=</span> cal.get<span class="token punctuation">(</span>Calendar.YEAR<span class="token punctuation">)</span><span class="token punctuation">;</span>        int m1 <span class="token operator">=</span> calNow.get<span class="token punctuation">(</span>Calendar.MONTH<span class="token punctuation">)</span>, d1 <span class="token operator">=</span> calNow.get<span class="token punctuation">(</span>Calendar.DATE<span class="token punctuation">)</span><span class="token punctuation">;</span>        int m2 <span class="token operator">=</span> calLast.get<span class="token punctuation">(</span>Calendar.MONTH<span class="token punctuation">)</span>, d2 <span class="token operator">=</span> calLast.get<span class="token punctuation">(</span>Calendar.DATE<span class="token punctuation">)</span><span class="token punctuation">;</span>        int<span class="token punctuation">[</span><span class="token punctuation">]</span> y1 <span class="token operator">=</span> <span class="token punctuation">{</span>31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31<span class="token punctuation">}</span><span class="token punctuation">;</span>        int<span class="token punctuation">[</span><span class="token punctuation">]</span> y2 <span class="token operator">=</span> <span class="token punctuation">{</span>31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31<span class="token punctuation">}</span><span class="token punctuation">;</span>        System.out.print<span class="token punctuation">(</span><span class="token string">"年龄："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        int month, year, day<span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>m1 <span class="token operator">></span> m2<span class="token punctuation">)</span> <span class="token punctuation">{</span>          //当前月份大于出生月份且当前天数小于出生日            <span class="token keyword">if</span> <span class="token punctuation">(</span>d1 <span class="token operator">&lt;</span> d2 <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>r1 % 4 <span class="token operator">==</span> 0 <span class="token operator">&amp;&amp;</span> r1 % 100 <span class="token operator">!=</span> 0 <span class="token operator">||</span> r1 % 400 <span class="token operator">==</span> 0<span class="token punctuation">))</span> <span class="token punctuation">{</span>                month <span class="token operator">=</span> m1 - m2 - 1<span class="token punctuation">;</span>                year <span class="token operator">=</span> r1 - r2<span class="token punctuation">;</span>                day <span class="token operator">=</span> d1 + y1<span class="token punctuation">[</span>m1 - 1<span class="token punctuation">]</span> - d2<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>day <span class="token operator">>=</span> y1<span class="token punctuation">[</span>m1 - 1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    month +<span class="token operator">=</span> 1<span class="token punctuation">;</span>                    day <span class="token operator">=</span> day - y1<span class="token punctuation">[</span>m1 - 1<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System.out.println<span class="token punctuation">(</span>year + <span class="token string">"岁"</span> + month + <span class="token string">"个月"</span> + day + <span class="token string">"天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>             //当前月份大于出生月份且当前天数大于出生日                month <span class="token operator">=</span> m1 - m2 - 1<span class="token punctuation">;</span>                year <span class="token operator">=</span> r1 - r2<span class="token punctuation">;</span>                day <span class="token operator">=</span> d1 + y2<span class="token punctuation">[</span>m1 - 1<span class="token punctuation">]</span> - d2<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>day <span class="token operator">>=</span> y2<span class="token punctuation">[</span>m1 - 1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    month +<span class="token operator">=</span> 1<span class="token punctuation">;</span>                    day <span class="token operator">=</span> day - y2<span class="token punctuation">[</span>m1 - 1<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System.out.println<span class="token punctuation">(</span>year + <span class="token string">"岁"</span> + month + <span class="token string">"个月"</span> + day + <span class="token string">"天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>m1 <span class="token operator">&lt;</span> m2<span class="token punctuation">)</span> <span class="token punctuation">{</span>           //当前月份小于出生月份            <span class="token keyword">if</span> <span class="token punctuation">(</span>d1 <span class="token operator">&lt;</span> d2 <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>r1 % 4 <span class="token operator">==</span> 0 <span class="token operator">&amp;&amp;</span> r1 % 100 <span class="token operator">!=</span> 0 <span class="token operator">||</span> r1 % 400 <span class="token operator">==</span> 0<span class="token punctuation">))</span> <span class="token punctuation">{</span>                month <span class="token operator">=</span> m1 + 12 - m2 - 1<span class="token punctuation">;</span>                year <span class="token operator">=</span> r1 - r2 - 1<span class="token punctuation">;</span>                day <span class="token operator">=</span> d1 + y1<span class="token punctuation">[</span>m1 - 1<span class="token punctuation">]</span> - d2<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>day <span class="token operator">>=</span> y1<span class="token punctuation">[</span>m1 - 1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    month +<span class="token operator">=</span> 1<span class="token punctuation">;</span>                    day <span class="token operator">=</span> day - y1<span class="token punctuation">[</span>m1 - 1<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System.out.println<span class="token punctuation">(</span>year + <span class="token string">"岁"</span> + month + <span class="token string">"个月"</span> + day + <span class="token string">"天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                month <span class="token operator">=</span> m1 + 12 - m2 - 1<span class="token punctuation">;</span>                year <span class="token operator">=</span> r1 - r2 - 1<span class="token punctuation">;</span>                day <span class="token operator">=</span> d1 + y2<span class="token punctuation">[</span>m1 - 1<span class="token punctuation">]</span> - d2<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>day <span class="token operator">>=</span> y2<span class="token punctuation">[</span>m1 - 1<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    month +<span class="token operator">=</span> 1<span class="token punctuation">;</span>                    day <span class="token operator">=</span> day - y2<span class="token punctuation">[</span>m1 - 1<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>                System.out.println<span class="token punctuation">(</span>year + <span class="token string">"岁"</span> + month + <span class="token string">"个月"</span> + day + <span class="token string">"天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>d1 <span class="token operator">&lt;</span> d2<span class="token punctuation">)</span> <span class="token punctuation">{</span>       //当前时间处于同一个月但是还没到生日那天                month <span class="token operator">=</span> 11<span class="token punctuation">;</span>                year <span class="token operator">=</span> r1 - r2 - 1<span class="token punctuation">;</span>                day <span class="token operator">=</span> d1 + y2<span class="token punctuation">[</span>m1 - 1<span class="token punctuation">]</span> - d2<span class="token punctuation">;</span>                System.out.println<span class="token punctuation">(</span>year + <span class="token string">"岁"</span> + month + <span class="token string">"个月"</span> + day + <span class="token string">"天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>             //当前时间处于同一个月但是过了或者刚好是生日那天                month <span class="token operator">=</span> 0<span class="token punctuation">;</span>                year <span class="token operator">=</span> r1 - r2<span class="token punctuation">;</span>                day <span class="token operator">=</span> d1 - d2<span class="token punctuation">;</span>                System.out.println<span class="token punctuation">(</span>year + <span class="token string">"岁"</span> + month + <span class="token string">"个月"</span> + day + <span class="token string">"天"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        //性别        int i, s <span class="token operator">=</span> 0, k <span class="token operator">=</span> 100<span class="token punctuation">;</span>        char<span class="token punctuation">[</span><span class="token punctuation">]</span> str2 <span class="token operator">=</span> str1.toCharArray<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str1.length<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>            char ch <span class="token operator">=</span> str2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            s +<span class="token operator">=</span> <span class="token punctuation">(</span>ch - <span class="token string">'0'</span><span class="token punctuation">)</span> * k<span class="token punctuation">;</span>            k <span class="token operator">=</span> k / 10<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s % 2 <span class="token operator">==</span> 0<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"性别：女"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"性别：男"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="CardIDDemo测试类："><a href="#CardIDDemo测试类：" class="headerlink" title="CardIDDemo测试类："></a>CardIDDemo测试类：</h3><pre class="line-numbers language-bash"><code class="language-bash">package cn.itcast.Sy1test1<span class="token punctuation">;</span><span class="token function">import</span> java.util.Scanner<span class="token punctuation">;</span>public class CardIDDemo <span class="token punctuation">{</span>    public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>    while<span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">{</span>        scanner<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    private static void scanner<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner input<span class="token operator">=</span>new Scanner<span class="token punctuation">(</span>System.in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"请输入你的身份证号："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String sc<span class="token operator">=</span>input.next<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        CardID cardID<span class="token operator">=</span>new CardID<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cardID.lengthVerify<span class="token punctuation">(</span>sc<span class="token punctuation">))</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>cardID.charVerify<span class="token punctuation">(</span>sc<span class="token punctuation">))</span> <span class="token punctuation">{</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>cardID.checkCodeVerify<span class="token punctuation">(</span>sc<span class="token punctuation">))</span> <span class="token punctuation">{</span>                    cardID.output<span class="token punctuation">(</span>sc<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>else <span class="token punctuation">{</span>                    scanner<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>            <span class="token punctuation">}</span>else <span class="token punctuation">{</span>                scanner<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span>else <span class="token punctuation">{</span>            scanner<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
