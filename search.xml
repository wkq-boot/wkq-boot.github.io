<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>java实验二</title>
      <link href="2021/05/07/sy2/"/>
      <url>2021/05/07/sy2/</url>
      
        <content type="html"><![CDATA[<h3 id="实验二：复数类的实现及运算"><a href="#实验二：复数类的实现及运算" class="headerlink" title="实验二：复数类的实现及运算"></a>实验二：复数类的实现及运算</h3><p>定义一个复数类，并实现以下复数类的方法：构造方法、得到实部、得到虚部、设置实部、设置虚部、复数的加法，减法，乘法，最后，创建对象进行运算。<br><strong>1、复数类 Complex 必须满足如下要求：<br>(1) 复数类 Complex 的属性有：</strong><br>realPart : double 型 ，私有属性，代表复数的实数部分<br>imaginPart : double 型 ，私有属性，代表复数的虚数部分<br><strong>(2) 复数类 Complex 的构造方法有：</strong><br>Complex( ) : 构造函数，将复数的实部和虚部都置 0。<br>Complex( double r , double i ) : 构造函数，形参 r 为实部的初值，i 为虚部的<br>初值。<br><strong>(3) 复数类 Complex 的公有方法有：</strong><br>void setReal(): 设置复数对象的实部值；<br>void setImagin (): 设置复数对象的虚部值；<br>double getReal(): 获得复数对象的实部数值；<br>double getImagin (): 获得复数对象的虚部数值；<br>Complex complexAdd(Complex a) : 将当前复数对象与形参复数对象相加，所<br>得的结果仍是一个复数值，返回给此方法的调用者。<br>说明：（a+bi）+(c+di)= (a+c)+(b+d)i<br>Complex complexSub(Complex a) : 将当前复数对象与形参复数对象相减，所<br>得的结果仍是一个复数值，返回给此方法的调用者。<br>Complex complexMulti(Complex a) : 将当前复数对象与形参复数对象相乘，所<br>得的结果仍是一个复数值，返回给此方法的调用者。<br>说明：（a+bi）*(c+di)=ac+bci+adi+bdi2=(ac-bd)+(bc+ad)i<br>Complex complexDiv(Complex a) : 将当前复数对象与形参复数对象相除，所<br>得的结果仍是一个复数值，返回给此方法的调用者。<br>说明：复数相除其实采用的是分子分母同时乘以分母的共轭复数，用以将分母的<br>虚部消除掉，除法可调用乘法进行计算更简便。 boolean equals(Complex a) : 将当前复数对象与形参复数对象进行比较，判断是<br>否相等，返回一个布尔值。<br>String toString( ) : 把当前复数对象的实部、虚部组合成 a+bi 的字符串形式，其<br>中 a 和 b 分别为实部和虚部的数据，注意特殊数值的情况，如实部为 0、虚部为负，<br>等等情况的表现方法。<br>常见复数的写法有：3+2i，3-2i，4+i，4-i，1，0，-2i，i，-i 等(应当编写一个数<br>组，存入以上 9 个复数，然后循环一次性全部输出，便于检查)。<br><strong>2、定义个 ComplexDemo 类：</strong><br>该类是程序的入口，要求能在主方法中创建至少 3 个复数（两个做操作数，通过<br>键盘输入实部和虚部创建，一个做结果，不需实部和虚部），然后调用上述方法进行<br>运算，并打印相应结果进行观察<br><strong>Complex类</strong></p><pre class=" language-bash"><code class="language-bash">package cn.itcast.Sy1test1<span class="token punctuation">;</span><span class="token function">import</span> java.text.DecimalFormat<span class="token punctuation">;</span><span class="token function">import</span> java.util.Scanner<span class="token punctuation">;</span>public class Complex <span class="token punctuation">{</span>    private double real<span class="token punctuation">;</span>    private double imagin<span class="token punctuation">;</span>    static double <span class="token punctuation">[</span><span class="token punctuation">]</span> RealNum<span class="token operator">=</span><span class="token punctuation">{</span>3,3,4,4,1,0,0,0,0<span class="token punctuation">}</span><span class="token punctuation">;</span>    static double <span class="token punctuation">[</span><span class="token punctuation">]</span> ImagNum<span class="token operator">=</span><span class="token punctuation">{</span>2,-2,1,-1,0,0,-2,1,-1<span class="token punctuation">}</span><span class="token punctuation">;</span>    public Complex<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        Scanner sc <span class="token operator">=</span> new Scanner<span class="token punctuation">(</span>System.in<span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"请输入复数实部："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        double r <span class="token operator">=</span> sc.nextDouble<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"请输入复数虚部："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        double i <span class="token operator">=</span> sc.nextDouble<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        complex<span class="token punctuation">(</span>r, i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    private void complex<span class="token punctuation">(</span>double r, double i<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.real <span class="token operator">=</span> r<span class="token punctuation">;</span>        this.imagin <span class="token operator">=</span> i<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public Complex<span class="token punctuation">(</span>double real, double imagin<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.real <span class="token operator">=</span> real<span class="token punctuation">;</span>        this.imagin <span class="token operator">=</span> imagin<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public double getReal<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> real<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setReal<span class="token punctuation">(</span>double real<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.real <span class="token operator">=</span> real<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public double getImagin<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> imagin<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public void setImagin<span class="token punctuation">(</span>double imagin<span class="token punctuation">)</span> <span class="token punctuation">{</span>        this.imagin <span class="token operator">=</span> imagin<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    //复数加法    public Complex Add<span class="token punctuation">(</span>Complex a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        double r1 <span class="token operator">=</span> a.getReal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        double i1 <span class="token operator">=</span> a.getImagin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        double newr1 <span class="token operator">=</span> r1 + real<span class="token punctuation">;</span>        double newi1 <span class="token operator">=</span> i1 + imagin<span class="token punctuation">;</span>        <span class="token keyword">return</span> new Complex<span class="token punctuation">(</span>newr1, newi1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    //复数减法    public Complex sub<span class="token punctuation">(</span>Complex a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        double r2 <span class="token operator">=</span> a.getReal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        double i2 <span class="token operator">=</span> a.getImagin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        double newr2 <span class="token operator">=</span> real - r2<span class="token punctuation">;</span>        double newi2 <span class="token operator">=</span> imagin - i2<span class="token punctuation">;</span>        <span class="token keyword">return</span> new Complex<span class="token punctuation">(</span>newr2, newi2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    //复数乘法    public Complex multi<span class="token punctuation">(</span>Complex a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        double r3 <span class="token operator">=</span> a.getReal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        double i3 <span class="token operator">=</span> a.getImagin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        double newr3 <span class="token operator">=</span> real * r3 - imagin * i3<span class="token punctuation">;</span>        double newi3 <span class="token operator">=</span> imagin * r3 + real * i3<span class="token punctuation">;</span>        <span class="token keyword">return</span> new Complex<span class="token punctuation">(</span>newr3, newi3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    //复数除法    public Complex div<span class="token punctuation">(</span>Complex a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        double r4 <span class="token operator">=</span> a.getReal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        double i4 <span class="token operator">=</span> a.getImagin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        double <span class="token function">v</span> <span class="token operator">=</span> Math.pow<span class="token punctuation">(</span>r4, 2<span class="token punctuation">)</span> + Math.pow<span class="token punctuation">(</span>i4, 2<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>v <span class="token operator">==</span> 0<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"除法分母不能为0,请重新输入第二个复数进行除法运算!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> new Complex<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            double newr3 <span class="token operator">=</span> <span class="token punctuation">(</span>real * r4 + imagin * i4<span class="token punctuation">)</span> / <span class="token punctuation">(</span>Math.pow<span class="token punctuation">(</span>r4, 2<span class="token punctuation">)</span> + Math.pow<span class="token punctuation">(</span>i4, 2<span class="token punctuation">))</span><span class="token punctuation">;</span>            double newi3 <span class="token operator">=</span> <span class="token punctuation">(</span>imagin * r4 - real * i4<span class="token punctuation">)</span> / <span class="token punctuation">(</span>Math.pow<span class="token punctuation">(</span>r4, 2<span class="token punctuation">)</span> + Math.pow<span class="token punctuation">(</span>i4, 2<span class="token punctuation">))</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> new Complex<span class="token punctuation">(</span>newr3, newi3<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    //判断相等    public boolean equals<span class="token punctuation">(</span>Complex a<span class="token punctuation">)</span> <span class="token punctuation">{</span>        double r <span class="token operator">=</span> a.getReal<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        double i <span class="token operator">=</span> a.getImagin<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token operator">==</span> real <span class="token operator">&amp;&amp;</span> i <span class="token operator">==</span> imagin<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    @Override    public String toString<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        DecimalFormat <span class="token function">df</span> <span class="token operator">=</span> new DecimalFormat<span class="token punctuation">(</span><span class="token string">"#.##"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String rp <span class="token operator">=</span> df.format<span class="token punctuation">(</span>this.real<span class="token punctuation">)</span><span class="token punctuation">;</span>//实部格式串        String ip <span class="token operator">=</span> df.format<span class="token punctuation">(</span>this.imagin<span class="token punctuation">)</span><span class="token punctuation">;</span>        String result <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>this.real <span class="token operator">!=</span> 0<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>this.imagin <span class="token operator">==</span> 0<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> rp<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>this.imagin <span class="token operator">==</span> 1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> rp + <span class="token string">"+i"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>this.imagin <span class="token operator">==</span> -1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> rp + <span class="token string">"-i"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>this.imagin <span class="token operator">></span> 0<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> rp + <span class="token string">"+"</span> + ip + <span class="token string">"i"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> rp + ip + <span class="token string">"i"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>this.imagin <span class="token operator">==</span> 0<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> <span class="token string">"0"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>this.imagin <span class="token operator">==</span> 1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> <span class="token string">"i"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>this.imagin <span class="token operator">==</span> -1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> <span class="token string">"-i"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                result <span class="token operator">=</span> ip + <span class="token string">"i"</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    public static void output<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> RealNum.length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System.out.print<span class="token punctuation">(</span>new Complex<span class="token punctuation">(</span>RealNum<span class="token punctuation">[</span>i<span class="token punctuation">]</span>,ImagNum<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>+<span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System.out.println<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p><strong>ComplexDemo测试</strong></p><pre class=" language-bash"><code class="language-bash">package cn.itcast.Sy1test1<span class="token punctuation">;</span>public class ComplexDemo <span class="token punctuation">{</span>    public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"toString测试数据："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Complex.output<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">while</span> <span class="token punctuation">(</span>true<span class="token punctuation">)</span> <span class="token punctuation">{</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"第一个复数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Complex complex1 <span class="token operator">=</span> new Complex<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"第二个复数"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Complex complex2 <span class="token operator">=</span> new Complex<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"complex1:"</span> + complex1<span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"complex2:"</span> + complex2<span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"两个复数是否相等："</span> + complex1.equals<span class="token punctuation">(</span>complex2<span class="token punctuation">))</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"complex1+complex2="</span> + complex1.Add<span class="token punctuation">(</span>complex2<span class="token punctuation">))</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"complex1-complex2="</span> + complex1.sub<span class="token punctuation">(</span>complex2<span class="token punctuation">))</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"complex1*complex2="</span> + complex1.multi<span class="token punctuation">(</span>complex2<span class="token punctuation">))</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"complex1/complex2="</span> + complex1.div<span class="token punctuation">(</span>complex2<span class="token punctuation">))</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java实验一</title>
      <link href="2021/05/07/sy1/"/>
      <url>2021/05/07/sy1/</url>
      
        <content type="html"><![CDATA[<h3 id="实验一：Java-基础程序设计（1）"><a href="#实验一：Java-基础程序设计（1）" class="headerlink" title="实验一：Java 基础程序设计（1）"></a>实验一：Java 基础程序设计（1）</h3><p>输入一系列成绩，输出最高分、最低分、平均分，并统计存在多少个并列最高分，要求输入输出格式正确，一重循环解决全部问题。<br>输入：65 87 95 86 72 58 56 75 95 94 78…<br>输出：最高分：95，最低分：56，平均分：72.36，同时存在 2 个并列最高分。</p><pre class=" language-bash"><code class="language-bash">package cn.itcast.Sy1test1<span class="token punctuation">;</span><span class="token function">import</span> java.util.Scanner<span class="token punctuation">;</span>public class Test1 <span class="token punctuation">{</span>    public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"请输入一系列成绩："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner k <span class="token operator">=</span> new Scanner<span class="token punctuation">(</span>System.in<span class="token punctuation">)</span><span class="token punctuation">;</span>        String m <span class="token operator">=</span> k.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String<span class="token punctuation">[</span><span class="token punctuation">]</span> score <span class="token operator">=</span> m.split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        int<span class="token punctuation">[</span><span class="token punctuation">]</span> sc <span class="token operator">=</span> new int<span class="token punctuation">[</span>score.length<span class="token punctuation">]</span><span class="token punctuation">;</span>        int <span class="token function">sum</span> <span class="token operator">=</span> 0, j <span class="token operator">=</span> 0<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> score.length<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>            sc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> Integer.parseInt<span class="token punctuation">(</span>score<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">sum</span> +<span class="token operator">=</span> sc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            j++<span class="token punctuation">;</span>        <span class="token punctuation">}</span>        int max, min, count <span class="token operator">=</span> 0<span class="token punctuation">;</span>        max <span class="token operator">=</span> sc<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">;</span>        min <span class="token operator">=</span> sc<span class="token punctuation">[</span>0<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> max<span class="token punctuation">)</span> <span class="token punctuation">{</span>                max <span class="token operator">=</span> sc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>                count <span class="token operator">=</span> 1<span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>max <span class="token operator">==</span> sc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                count++<span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>sc<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> min<span class="token punctuation">)</span> <span class="token punctuation">{</span>                min <span class="token operator">=</span> sc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System.out.print<span class="token punctuation">(</span><span class="token string">"最高分:"</span> + max + <span class="token string">",最低分:"</span> + min<span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.printf<span class="token punctuation">(</span><span class="token string">",平均分:%.2f"</span>, <span class="token punctuation">(</span>float<span class="token punctuation">)</span> <span class="token function">sum</span> / j<span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span><span class="token string">",同时存在"</span> + count + <span class="token string">"个并列最高分"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h3 id="实验一：Java-基础程序设计（2）"><a href="#实验一：Java-基础程序设计（2）" class="headerlink" title="实验一：Java 基础程序设计（2）"></a>实验一：Java 基础程序设计（2）</h3><p>输出 1,000,000 之内的所有素数（即非 1 和自身不能被其他数除尽的数）要求程<br>序简单，程序运行速度较快，行列对齐美观。</p><pre class=" language-bash"><code class="language-bash">package cn.itcast.Sy1test1<span class="token punctuation">;</span>public class Test2 <span class="token punctuation">{</span>    public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>      int n,cout<span class="token operator">=</span>0<span class="token punctuation">;</span>      //素数判断        for<span class="token punctuation">(</span>n <span class="token operator">=</span> 2 <span class="token punctuation">;</span> n<span class="token operator">&lt;=</span> 1000000 <span class="token punctuation">;</span> n++<span class="token punctuation">)</span><span class="token punctuation">{</span>            int i<span class="token punctuation">;</span>            for<span class="token punctuation">(</span> i <span class="token operator">=</span> 2 <span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>Math.sqrt<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token punctuation">;</span> i++<span class="token punctuation">)</span><span class="token punctuation">{</span>                if<span class="token punctuation">(</span>n%i <span class="token operator">==</span>0<span class="token punctuation">)</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            if<span class="token punctuation">(</span>i<span class="token operator">></span>Math.sqrt<span class="token punctuation">(</span>n<span class="token punctuation">))</span> <span class="token punctuation">{</span>                System.out.print<span class="token punctuation">(</span>n+<span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                cout++<span class="token punctuation">;</span>                if<span class="token punctuation">(</span>cout%10<span class="token operator">==</span>0<span class="token punctuation">)</span>                <span class="token punctuation">{</span>                    System.out.println<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        System.out.println<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"一共有"</span>+cout+<span class="token string">"个"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="实验一：Java-基础程序设计（3）"><a href="#实验一：Java-基础程序设计（3）" class="headerlink" title="实验一：Java 基础程序设计（3）"></a>实验一：Java 基础程序设计（3）</h3><p>输出如下图形，行数通过键盘输入的数据确定：</p><pre class=" language-bash"><code class="language-bash">package cn.itcast.Sy1test1<span class="token punctuation">;</span><span class="token function">import</span> java.util.Scanner<span class="token punctuation">;</span>public class Test3 <span class="token punctuation">{</span>    public static void main<span class="token punctuation">(</span>String<span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">{</span>        simple<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>//        nb<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    private static void simple<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        while<span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">{</span>        System.out.println<span class="token punctuation">(</span><span class="token string">"请输入金字塔层数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Scanner sc<span class="token operator">=</span>new Scanner<span class="token punctuation">(</span>System.in<span class="token punctuation">)</span><span class="token punctuation">;</span>        int num<span class="token operator">=</span>sc.nextInt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        for<span class="token punctuation">(</span>int i<span class="token operator">=</span>1<span class="token punctuation">;</span>i<span class="token operator">&lt;=</span>num<span class="token punctuation">;</span>i++<span class="token punctuation">)</span><span class="token punctuation">{</span>     //控制行数            <span class="token keyword">for</span> <span class="token punctuation">(</span>int j <span class="token operator">=</span> 0<span class="token punctuation">;</span> j <span class="token operator">&lt;</span>num-i<span class="token punctuation">;</span> j++<span class="token punctuation">)</span> <span class="token punctuation">{</span>                System.out.print<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            for<span class="token punctuation">(</span>int k<span class="token operator">=</span>0<span class="token punctuation">;</span>k<span class="token operator">&lt;</span>i <span class="token punctuation">;</span>k++<span class="token punctuation">)</span><span class="token punctuation">{</span>                if<span class="token punctuation">(</span>i%2<span class="token operator">==</span>1<span class="token punctuation">)</span><span class="token punctuation">{</span>                    System.out.print<span class="token punctuation">(</span><span class="token string">"1"</span>+<span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>else<span class="token punctuation">{</span>                    System.out.print<span class="token punctuation">(</span><span class="token string">"2"</span>+<span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>            System.out.println<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    /*private static void nb<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>          //升级版   随便输入n个数据都可以“循环数据“打印金字塔        while<span class="token punctuation">(</span>true<span class="token punctuation">)</span><span class="token punctuation">{</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"请输入金字塔层数："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Scanner sc <span class="token operator">=</span> new Scanner<span class="token punctuation">(</span>System.in<span class="token punctuation">)</span><span class="token punctuation">;</span>            Scanner sq <span class="token operator">=</span> new Scanner<span class="token punctuation">(</span>System.in<span class="token punctuation">)</span><span class="token punctuation">;</span>            int num <span class="token operator">=</span> sc.nextInt<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System.out.println<span class="token punctuation">(</span><span class="token string">"请输入数据："</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String s <span class="token operator">=</span> sq.nextLine<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> score <span class="token operator">=</span> s.split<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            String<span class="token punctuation">[</span><span class="token punctuation">]</span> m <span class="token operator">=</span> new String<span class="token punctuation">[</span>score.length<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>int k <span class="token operator">=</span> 0<span class="token punctuation">;</span> k <span class="token operator">&lt;</span> score.length<span class="token punctuation">;</span> k++<span class="token punctuation">)</span> <span class="token punctuation">{</span>                m<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> score<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            int cout <span class="token operator">=</span> 0, q <span class="token operator">=</span> 0, cq <span class="token operator">=</span> 0<span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>int i <span class="token operator">=</span> 0<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> num<span class="token punctuation">;</span> i++<span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">while</span> <span class="token punctuation">(</span>cq <span class="token operator">&lt;</span> num<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>int j <span class="token operator">=</span> num - cq<span class="token punctuation">;</span> j <span class="token operator">></span> 0<span class="token punctuation">;</span> j--<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        System.out.print<span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">for</span> <span class="token punctuation">(</span>int n <span class="token operator">=</span> 0<span class="token punctuation">;</span> n <span class="token operator">&lt;</span> cq + 1<span class="token punctuation">;</span> n++<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        System.out.print<span class="token punctuation">(</span>m<span class="token punctuation">[</span>q<span class="token punctuation">]</span> + <span class="token string">" "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    q++<span class="token punctuation">;</span>                    cq++<span class="token punctuation">;</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>q <span class="token operator">==</span> score.length<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        q <span class="token operator">=</span> 0<span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>cout <span class="token operator">==</span> cq - 1<span class="token punctuation">)</span> <span class="token punctuation">{</span>                        System.out.println<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                    cout++<span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>*/<span class="token punctuation">}</span>    </code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> java </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
